package wipro.day5.Maps.v2;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;

public class DynamicMapping {
	
	public int ReturnMapSum(Map<String, Integer> funcMap) {
		int total=0;
		
		for (Map.Entry<String, Integer> entry : funcMap.entrySet()) {
            total += entry.getValue();
        }
		return total;
	}
	
	public void ReturnMaxMap(Map<String, Integer> funcMap) {
		int currentMaximum=0;
		String currentKey = "None";
		
		for (Map.Entry<String, Integer> entry : funcMap.entrySet()) {
            if (entry.getValue() > currentMaximum) {
            	currentMaximum = entry.getValue();
            	currentKey = entry.getKey();
            } else {
            	continue;
            }
        }
		System.out.println("Value: "+currentMaximum+" - Key: "+currentKey);
	}
	
	public void ReturnMinMap(Map<String, Integer> funcMap) {
		int currentMinimum=Integer.MAX_VALUE;
		String currentKey = "None";
		
		for (Map.Entry<String, Integer> entry : funcMap.entrySet()) {
            if (entry.getValue() < currentMinimum) {
            	currentMinimum = entry.getValue();
            	currentKey = entry.getKey();
            } else {
            	continue;
            }
        }
		System.out.println("Value: "+currentMinimum+" - Key: "+currentKey);
	}
	
	
	public static void main(String[] args) {
		
		int userChoice = 0;
		
		DynamicMapping dm = new DynamicMapping();
		Scanner sc = new Scanner(System.in);
		Map<String,Integer> map = new HashMap<>();
		
		do {
			System.out.println("1 = Add elements\n2 = View Map\n"
					+ "3 = Total\n4 = Maximum\n5 = Minimum\n6 = Exit");
			System.out.printf("Choose: ");
			
			userChoice = sc.nextInt();
			
			switch (userChoice) {
			case 1: {
				int userCount = 0;
				String key = "None";
				int value = 0;
				
				System.out.printf("\nHow many elements to add: ");
				userCount = sc.nextInt();
				
				for (int i=0; i<userCount; i++) {
					
					
					try {
						System.out.printf("Enter Key: ");
						key = sc.nextLine();
						
						System.out.printf("Enter Value: ");
						value = sc.nextInt();
						
					} catch (Exception e) {
						System.out.println("Exception: "+e+"\nValues can only be Number!");
					}
					
					map.put(key, value);
				}
				break;
			}
			
			case 2: {
				System.out.println("\nCurrent Map is: "+map);
				break;
			}
			
			case 3: {
				System.out.println("\nTotal is: " + dm.ReturnMapSum(map));
				break;
			}
			
			case 4: {
				System.out.println("\nMaximum is: \n" + dm.ReturnMaxMap(map));
				break;
			}
			
			default:
				throw new IllegalArgumentException("Unexpected value: " + userChoice);
			}
			
			
		} while (userChoice!=6);
		
	}

}
